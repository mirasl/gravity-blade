[gd_scene load_steps=17 format=2]

[ext_resource path="res://Player.cs" type="Script" id=1]
[ext_resource path="res://GravityWheel.tscn" type="PackedScene" id=2]
[ext_resource path="res://PlayerCamera.cs" type="Script" id=3]
[ext_resource path="res://Slice.tscn" type="PackedScene" id=4]
[ext_resource path="res://normal_curve.tres" type="Curve" id=5]

[sub_resource type="SphereShape" id=1]
radius = 0.981067

[sub_resource type="ParticlesMaterial" id=2]
emission_shape = 5
emission_ring_radius = 4.0
emission_ring_inner_radius = 9.0
emission_ring_height = 1.0
emission_ring_axis = Vector3( 0, 0, 1 )
direction = Vector3( 0, 0, -1 )
spread = 0.0
gravity = Vector3( 0, 0, 0 )
initial_velocity = 50.0

[sub_resource type="Shader" id=4]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.3.stable.mono's SpatialMaterial.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,unshaded;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	albedo_tex *= COLOR;
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	ALPHA = UV.y;
}
"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )

[sub_resource type="CapsuleMesh" id=3]
material = SubResource( 5 )
radius = 0.05
mid_height = 9.197
radial_segments = 4
rings = 1

[sub_resource type="Shader" id=6]
code = "shader_type canvas_item;

uniform float alpha = 1.0;

void fragment()
{
	vec4 color = texture(SCREEN_TEXTURE, SCREEN_UV);
	float grayscale = (color.r + color.g + color.b) * 0.3333;
	COLOR = vec4(grayscale, 0.0, 0.0, 0.0);
	COLOR.a = (UV.x - 0.45)*(UV.x - 0.45) + (UV.y - 0.5)*(UV.y - 0.5);
	COLOR.a *= alpha;
	
//	COLOR.a *= 2.0;
}

//void fragment()
//{
//	vec4 color = texture(SCREEN_TEXTURE, SCREEN_UV);
//	float grayscale = (color.r + color.g + color.b) * 0.3333;
//	COLOR = vec4(0.0, 0.0, grayscale, 0.0);
//	COLOR.a = (UV.x - 0.55)*(UV.x - 0.55) + (UV.y - 0.5)*(UV.y - 0.5);
//}"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/alpha = 0.0

[sub_resource type="Shader" id=8]
code = "shader_type canvas_item;

uniform float alpha = 1.0;

//void fragment()
//{
//	vec4 color = texture(SCREEN_TEXTURE, SCREEN_UV);
//	float grayscale = (color.r + color.g + color.b) * 0.3333;
//	COLOR = vec4(grayscale, 0.0, 0.0, 0.0);
//	COLOR.a = (UV.x - 0.45)*(UV.x - 0.45) + (UV.y - 0.5)*(UV.y - 0.5);
////	COLOR.a *= 2.0;
//}

void fragment()
{
	vec4 color = texture(SCREEN_TEXTURE, SCREEN_UV);
	float grayscale = (color.r + color.g + color.b) * 0.3333;
	COLOR = vec4(0.0, 0.0, grayscale, 0.0);
	COLOR.a = (UV.x - 0.55)*(UV.x - 0.55) + (UV.y - 0.5)*(UV.y - 0.5);
	COLOR.a *= alpha;
}"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )
shader_param/alpha = 0.0

[sub_resource type="Animation" id=11]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Red:material:shader_param/alpha")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 1.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Blue:material:shader_param/alpha")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 1.0 ]
}

[sub_resource type="Animation" id=10]
resource_name = "fade"
tracks/0/type = "value"
tracks/0/path = NodePath("Red:material:shader_param/alpha")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 1.0, 1.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Blue:material:shader_param/alpha")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 1.0, 1.0 ]
}

[node name="Player" type="KinematicBody"]
collision_layer = 2
collision_mask = 5
script = ExtResource( 1 )

[node name="CollisionShape" type="CollisionShape" parent="."]
shape = SubResource( 1 )

[node name="Camera" type="Camera" parent="."]
current = true
far = 1000.0
script = ExtResource( 3 )

[node name="SpeedLines60" type="Particles" parent="Camera"]
transform = Transform( -1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, 0, -11.5295 )
emitting = false
amount = 60
lifetime = 0.28
process_material = SubResource( 2 )
draw_pass_1 = SubResource( 3 )

[node name="SpeedLines30" type="Particles" parent="Camera"]
transform = Transform( -1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, 0, -11.5295 )
emitting = false
amount = 30
lifetime = 0.28
process_material = SubResource( 2 )
draw_pass_1 = SubResource( 3 )

[node name="SpeedLines15" type="Particles" parent="Camera"]
transform = Transform( -1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, 0, -11.5295 )
emitting = false
amount = 15
lifetime = 0.28
process_material = SubResource( 2 )
draw_pass_1 = SubResource( 3 )

[node name="SpeedLines5" type="Particles" parent="Camera"]
transform = Transform( -1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, 0, -11.5295 )
emitting = false
amount = 5
lifetime = 0.28
process_material = SubResource( 2 )
draw_pass_1 = SubResource( 3 )

[node name="UI" type="CanvasLayer" parent="."]

[node name="GravityWheel" parent="UI" instance=ExtResource( 2 )]
visible = false

[node name="Tween" type="Tween" parent="."]

[node name="FloorCast" type="RayCast" parent="."]
enabled = true
cast_to = Vector3( 0, -1.2, 0 )
collision_mask = 21

[node name="SliceCanvas" type="CanvasLayer" parent="."]

[node name="GravitySlice" parent="SliceCanvas" instance=ExtResource( 4 )]
position = Vector2( 962, 542 )
points = PoolVector2Array(  )
width_curve = ExtResource( 5 )
Gravity = true

[node name="NormalSlice" parent="SliceCanvas" instance=ExtResource( 4 )]
width_curve = ExtResource( 5 )
default_color = Color( 1, 1, 1, 1 )

[node name="Aberration" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="Red" type="ColorRect" parent="Aberration"]
material = SubResource( 7 )
anchor_right = 1.0
anchor_bottom = 1.0

[node name="Blue" type="ColorRect" parent="Aberration"]
material = SubResource( 9 )
anchor_right = 1.0
anchor_bottom = 1.0

[node name="AnimationPlayer" type="AnimationPlayer" parent="Aberration"]
anims/RESET = SubResource( 11 )
anims/fade = SubResource( 10 )

[connection signal="Timeout" from="UI/GravityWheel" to="." method="sig_GravityWheelTimeout"]
[connection signal="LineDrawn" from="SliceCanvas/GravitySlice" to="." method="sig_LineDrawn"]
[connection signal="LineDrawn" from="SliceCanvas/NormalSlice" to="." method="sig_LineDrawn"]

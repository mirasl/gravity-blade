[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;

render_mode async_visible,blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;

uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
uniform float animationSpeed = 5.0;
uniform float animationOffset = 0.005;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}



float distanceSquared16by9(vec2 a, vec2 b)
{
	// 0.31640625 = (9 / 16)^2
	return (a.y - b.y)*(a.y - b.y)*0.31640625 + 
			(a.x - b.x)*(a.x - b.x);
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	ALPHA = albedo.a * albedo_tex.a;

	float offset = 0.025;
	if (int(TIME*animationSpeed) % 2 == 0)
	{
		offset = 0.025 + animationOffset;
	}
	
	// Draw dots every other pixel:
	int x = int(SCREEN_UV.x * 640.0);
	int y = int(SCREEN_UV.y * 360.0);
	
	if (x % 2 == 0 && y % 2 == 0)
	{
		if (UV.x < 0.2 || UV.y < 0.05)
		{
			ALBEDO *= 1.5;
		}
	}

//	// Draw dots:
//	for (float x = offset; x < 1.0; x += 0.01)
//	{
//		for (float y = 0.05; y < 1.0; y += 0.01)
//		{
//			if (distanceSquared16by9(SCREEN_UV, vec2(x,y)) < 0.000002)
//			{
//				ALBEDO = vec3(1.0);
//			}
//		}
//	}
//	for (float x = 0.005 + offset; x < 1.0; x += 0.01)
//	{
//		for (float y = 0.005; y < 1.0; y += 0.01)
//		{
//			if (distanceSquared16by9(SCREEN_UV, vec2(x,y)) < 0.000002)
//			{
//				ALBEDO = vec3(1.0);
//			}
//		}
//	}
}

"
